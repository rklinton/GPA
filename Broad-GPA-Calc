#include <iostream>
#include <vector>
#include <string>
#include <math.h>

#define float double 

using namespace std;



int basicinput()
{
	string classification;
	int sem, free, tot, cnum, extra;

	do
	{
		cout << "What is your most recent classification?( Freshamn, Sophomore, Junior, Senior ):" << endl;
		cin >> classification;
	} while ((classification != "Freshman") && (classification != "Sophomore") && (classification != "Junior") && (classification != "Senior"));
	cout << endl;
	if (classification == "Freshman")
	{
		cnum = 0;
	}
	else if (classification == "Sophomore")
	{
		cnum = 1;
	}
	else if (classification == "Junior")
	{
		cnum = 2;
	}
	else
	{
		cnum = 3;
	}

	do
	{
		cout << "What is the most semesters you completed that year?( 1 or 2 ):" << endl;
		cin >> sem;
	} while (sem != 1 && sem != 2);

	cout << endl;

	do
	{
		cout << "How many late arrials, early release, and PASS/FAIL (semester)periods that don't factor in have you had ?( 0 to 8 ):" << endl;
		cin >> free;
	} while (free < 0 || free > 8);

	cout << endl;

	do
	{
		cout << "How many extra(summer semester) classes have you taken that will factor into your gpa?( 0 to 10 ):" << endl;
		cin >> extra;
	} while (extra < 0 || extra > 10);

	cout << endl;

	tot = (7 * ((cnum * 2) + sem)) - free + extra;
	return tot;
}

bool WTKLH()
{
	char a;
	do
	{
		cout << "\nDo you want to know your Latin Honors(Summa, Magna, Cum Laude) status?( Y or N)" << endl;
		cin >> a;
	} while (a != 'Y' && a != 'N');

	if (a == 'Y')
		return true;
	else
		return false;

}

string LatinHonors(double gpaa, double scale, char whate)
{
	double sum, mag, cum, sscale;
	string wstat;
	if (whate == 'W')
	{
		sscale = scale - 1;
		wstat = "weighted";
	}
	else if (whate == 'U')
	{
		wstat == "unweighted";
	}
	do
	{
		cout << "What's the lowest possible GPA needed on a " << wstat << " " << sscale << ".0 scale to get Summa Cum Laude?" << endl;
		cin >> sum;
	} while (sum <= 0 || sum >= scale);
	do
	{
		cout << "What's the lowest possible GPA needed on a " << wstat << " " << sscale << ".0 scale to get Magna Cum Laude?" << endl;
		cin >> mag;
	} while (mag <= 0 || mag >= sum);
	do
	{
		cout << "What's the lowest possible GPA needed on a " << wstat << " " << sscale << ".0 scale to get Cum Laude?" << endl;
		cin >> cum;
	} while (cum <= 0 || cum >= mag);

	if (gpaa >= sum)
	{
		return "Summa Cum Laude";
	}
	else if (gpaa >= mag)
	{
		return "Magna Cum Laude";
	}
	else if (gpaa >= cum)
	{
		return "Cum Laude";
	}
	else
	{
		return "with no honors";
	}
}

class GPA
{
public:
	int col, hon, reg;
	float bigtot = 0.0f;
	char weight, colshon;
	vector <int> colgrades;
	vector <int> hongrades;
	vector <int> reggrades;

	float SecondInput()
	{
		float scale, fpart, ipart;
		do
		{
			cout << "What is your school's grading scale?( 4.0, 5.0, 6.0 ): " << endl;
			cin >> scale;
			fpart = modf(scale, &ipart);
		} while (fpart != 0 || scale < 4 || scale > 6);

		cout << endl;

		do
		{
			cout << "Is it weighted or unweighted?( W or U ): " << endl;
			cin >> weight;
		} while (weight != 'U' && weight != 'W');

		cout << endl;

		if (weight == 'W')
		{
			do
			{
				cout << "Are college classes(AP/DC/IB) worth the same number of grade points as honors classes?( Y or N ): " << endl;
				cin >> colshon;
			} while (colshon != 'Y' && colshon != 'N');
		}
		cout << endl;

		if (weight == 'W')
		{
			return scale + 1;
		}
		else
		{
			return scale;
		}
	}

	double Calc(int ccount, float scaler)
	{
		if (weight == 'W')
		{
			if (colshon == 'N')
			{
				do
				{
					cout << "How many of your " << ccount << " total classes were College Level?( 0 - " << ccount << " ): " << endl;
					cin >> col;
				} while (col < 0 || col > ccount);
				ccount = ccount - col;
				cout << endl;
				do
				{
					cout << "How many of your remaining " << ccount << " total classes were Honors/Above Level?( 0 - " << ccount << " ): " << endl;
					cin >> hon;
				} while (hon < 0 || hon > ccount);

				reg = ccount - hon;
				cout << endl;
				for (int i = 0; i < col; i++)
				{
					int c;
					do
					{
						cout << "Enter grade in College-Level class #" << (i + 1) << "(whole integer):  ";
						cin >> c;
					} while (c < 0);
					colgrades.emplace_back(c);
				}
				cout << endl;
				for (int i = 0; i < hon; i++)
				{
					int c;
					do
					{
						cout << "Enter grade in Above-Level/Honors class #" << (i + 1) << "(whole integer):  ";
						cin >> c;
					} while (c < 0);
					hongrades.emplace_back(c);
				}
				cout << endl;
				for (int i = 0; i < reg; i++)
				{
					int c;
					do
					{
						cout << "Enter grade in On-Level class #" << (i + 1) << "(whole integer):  ";
						cin >> c;
					} while (c < 0);
					reggrades.emplace_back(c);
				}

				for (int d = 0; d < col; d++)
				{
					if (colgrades[d] >= 93)
					{
						bigtot += scaler;
					}
					else if (colgrades[d] >= 90)
					{
						bigtot += (scaler - .3);
					}
					else if (colgrades[d] >= 87)
					{
						bigtot += (scaler - .7);
					}
					else if (colgrades[d] >= 83)
					{
						bigtot += (scaler - 1);
					}
					else if (colgrades[d] >= 80)
					{
						bigtot += (scaler - 1.3);
					}
					else if (colgrades[d] >= 77)
					{
						bigtot += (scaler - 1.7);
					}
					else if (colgrades[d] >= 73)
					{
						bigtot += (scaler - 2);
					}
					else if (colgrades[d] >= 70)
					{
						bigtot += (scaler - 2.3);
					}
					else if (colgrades[d] >= 67)
					{
						bigtot += (scaler - 2.7);
					}
					else if (colgrades[d] >= 65)
					{
						bigtot += (scaler - 3);
					}
					else
					{
						bigtot += 0;
					}
				}

				for (int d = 0; d < hon; d++)
				{
					if (hongrades[d] >= 93)
					{
						bigtot += (scaler - .5);
					}
					else if (hongrades[d] >= 90)
					{
						bigtot += (scaler - .8);
					}
					else if (hongrades[d] >= 87)
					{
						bigtot += (scaler - 1.2);
					}
					else if (hongrades[d] >= 83)
					{
						bigtot += (scaler - 1.5);
					}
					else if (hongrades[d] >= 80)
					{
						bigtot += (scaler - 1.8);
					}
					else if (hongrades[d] >= 77)
					{
						bigtot += (scaler - 2.2);
					}
					else if (hongrades[d] >= 73)
					{
						bigtot += (scaler - 2.5);
					}
					else if (hongrades[d] >= 70)
					{
						bigtot += (scaler - 2.8);
					}
					else if (hongrades[d] >= 67)
					{
						bigtot += (scaler - 3.2);
					}
					else if (hongrades[d] >= 65)
					{
						bigtot += (scaler - 3.5);
					}
					else
					{
						bigtot += 0;
					}
				}
				for (int d = 0; d < reg; d++)
				{
					if (reggrades[d] >= 93)
					{
						bigtot += (scaler - 1);
					}
					else if (reggrades[d] >= 90)
					{
						bigtot += (scaler - 1.3);
					}
					else if (reggrades[d] >= 87)
					{
						bigtot += (scaler - 1.7);
					}
					else if (reggrades[d] >= 83)
					{
						bigtot += (scaler - 2);
					}
					else if (reggrades[d] >= 80)
					{
						bigtot += (scaler - 2.3);
					}
					else if (reggrades[d] >= 77)
					{
						bigtot += (scaler - 2.7);
					}
					else if (reggrades[d] >= 73)
					{
						bigtot += (scaler - 3);
					}
					else if (reggrades[d] >= 70)
					{
						bigtot += (scaler - 3.3);
					}
					else if (reggrades[d] >= 67)
					{
						bigtot += (scaler - 3.7);
					}
					else if (reggrades[d] >= 65)
					{
						bigtot += (scaler - 4);
					}
					else
					{
						bigtot += 0;
					}
				}
			}
			else if (colshon == 'Y')
			{
			  do
			  {
				  cout << "How many of your " << ccount << " total classes were Above Level?( 0 - " << ccount << " ): " << endl;
				  cin >> hon;
			  } while (hon < 0 || hon > ccount);

			  reg = ccount - hon;
			  cout << endl;
			for (int i = 0; i < hon; i++)
			{
				int c;
				do
				{
					cout << "Enter grade in Above-Level/Honors class #" << (i + 1) << "(whole integer):  ";
					cin >> c;
				} while (c < 0);
				hongrades.emplace_back(c);
			}
			cout << endl;
			for (int i = 0; i < reg; i++)
			{
				int c;
				do
				{
					cout << "Enter grade in On-Level class #" << (i + 1) << "(whole integer):  ";
					cin >> c;
				} while (c < 0);
				reggrades.emplace_back(c);
			}

			for (int d = 0; d < hon; d++)
			{
				if (hongrades[d] >= 90)
				{
					bigtot += scaler;
				}
				else if (hongrades[d] >= 80)
				{
					bigtot += (scaler - 1);
				}
				else if (hongrades[d] >= 75)
				{
					bigtot += (scaler - 2);
				}
				else if (hongrades[d] >= 70)
				{
					bigtot += (scaler - 3);
				}
				else
				{
					bigtot += 0;
				}
			}
			for (int d = 0; d < reg; d++)
			{
				if (reggrades[d] >= 90)
				{
					bigtot += (scaler - 1);
				}
				else if (reggrades[d] >= 80)
				{
					bigtot += (scaler - 2);
				}
				else if (reggrades[d] >= 75)
				{
					bigtot += (scaler - 3);
				}
				else if (reggrades[d] >= 70)
				{
					bigtot += (scaler - 4);
				}
				else
				{
					bigtot += 0;
				}
			}
			}
		}
		else if (weight == 'U')
		{
			for(int i = 0; i < ccount; i++)
			{
				int c;
				do
				{
					cout << "Enter grade in class #" << i + 1 << "(whole integer): ";
					cin >> c;
				} while (c < 0);
				if (c >= 93)
				{
					bigtot += scaler;
				}
				else if (c >= 90)
				{
					bigtot += (scaler - .3);
				}
				else if (c >= 87)
				{
					bigtot += (scaler - .7);
				}
				else if (c >= 83)
				{
					bigtot += (scaler - 1);
				}
				else if (c >= 80)
				{
					bigtot += (scaler - 1.3);
				}
				else if (c >= 77)
				{
					bigtot += (scaler - 1.7);
				}
				else if (c >= 73)
				{
					bigtot += (scaler - 2);
				}
				else if (c >= 70)
				{
					bigtot += (scaler - 2.3);
				}
				else if (c >= 67)
				{
					bigtot += (scaler - 2.7);
				}
				else if (c >= 65)
				{
					bigtot += (scaler - 3);
				}
				else
				{
					bigtot += 0;
				}
			}
		}
		return (bigtot / double(ccount));
	}

	char TellWeight()
	{
		return weight;
	}

};

int main()
{
	int totalclasses = basicinput();
	GPA u;
	float scale = u.SecondInput();
	double gpaa = u.Calc(totalclasses, scale);
	bool want = WTKLH();
	char wate = u.TellWeight();
	string latstat;
	if (want)
	{
		latstat = LatinHonors(gpaa, scale, wate);
	}
	cout << "\nGrade Point Average:  " << gpaa << "\n";
	if (want)
	{
		cout << "\nWith the inputed information, with this GPA you would graduate " << latstat << "\n";
	}
	cin.get();
}
